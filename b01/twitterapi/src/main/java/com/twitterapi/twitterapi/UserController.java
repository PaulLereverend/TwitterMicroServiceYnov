package com.twitterapi.twitterapi;


import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
  private BCryptPasswordEncoder mdp;
  private User current_user;
  @Bean
  public BCryptPasswordEncoder bCryptPasswordEncoder() {
      return new BCryptPasswordEncoder();
  }
  

  @RequestMapping(value = "/add", method = RequestMethod.POST, produces="application/json", consumes="application/json")
  public @ResponseBody User addNewUser (@RequestBody User user) {
	
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
	mdp = new BCryptPasswordEncoder();
	if(userRepository.findByUsername(user.getName())!=null) {
		return null;
	}

	user.setPassword(mdp.encode(user.getPassword()));
    userRepository.save(user);
    current_user = user;
    return user;
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
	  mdp = new BCryptPasswordEncoder();
	
    return userRepository.findAll();
  }
  
  //@RequestMapping(value = "/login", method = RequestMethod.POST, produces="application/json", consumes="application/json")
  //public @ResponseBody String login (@RequestBody String name, String password ) {
  @RequestMapping(value = "/login", method = RequestMethod.POST)
  @ResponseBody
  public String login (@RequestBody Map<String, String> json) {
	  mdp = new BCryptPasswordEncoder();
	  if(userRepository.findByUsername(json.get("name"))==null) {
			return "Erreur. Le nom n'est pas renseigné dans la base de données";
		}
	  String mdpuser = userRepository.findByUsername(json.get("name")).getPassword();
	 // System.out.println(userRepository.findPasswordByUsername());
	  if(mdp.matches(json.get("password"), mdpuser)) {
		  current_user = userRepository.findByUsername(json.get("name"));
		  return "Connecté";
	  }
	  else {
		  return "Erreur. Mauvais mot de passe";
	  }
  }
 
  @GetMapping(path="/{id}") // Map ONLY POST Requests
  public @ResponseBody User getuser(@PathVariable int id) {
	return userRepository.findById(id);
 }
  @GetMapping(path="/informations") // Map ONLY POST Requests
  public @ResponseBody User getDetails() {
	return current_user;
 }

@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    @Override
    protected void configure(HttpSecurity http) throws Exception {
       // http.authorizeRequests().anyRequest().permitAll();
        http.csrf().disable().authorizeRequests().anyRequest().permitAll(); 

    }
}
}

